#+title: Makefile Tutorial By Example
#+author: Translated by Thanga Ayyanar

நான் இந்த வழிகாட்டியை உருவாக்கினேன், ஏனென்றால் என்னால் மேக் கோப்பு (Makefile) பற்றி சுற்றிக்கொள்ள கடினமாக இருந்ததால். அவைகளில் மறைந்திருக்கும் விதிகள் மற்றும் மறைமுகமான சின்னங்களைக் கொண்டு இருக்கிறது, மேலும் எளிமையான கேள்விக்கு எளிமையான பதில்களைக் கொடுக்கவில்லை. இதைத் தீர்க்க, நான் பல வார இறுதிகளில் அமர்ந்து மேக் கோப்பு பற்றி என்னால் முடிந்த அனைத்தையும் படித்தேன். இந்த வழிகாட்டியில் மிக முக்கியமான விஷயங்களை நான் சுருக்கி தொகுத்து உள்ளேன். ஒவ்வொரு தலைப்புக்கும் ஒரு சுருக்கமான விளக்கமும், சுயமாக இயங்கக்கூடிய ஒரு உதாரணமும் உள்ளது.

நீங்கள் பெரும்பாலும் மேக் ஐப் புரிந்து கொண்டால், மேக் கோப்பு பயனர் கையேடுவைப் (cookbook) பார்க்கவும், இதில் மேக் கோப்பு இன் ஒவ்வொரு பகுதியும் என்ன செய்கிறது என்பதைப் பற்றிய போதுமான கருத்துகளைக் கொண்ட நடுத்தர அளவிலான திட்டங்களுக்கான (project) படிம அச்சு(template) உள்ளது.

நல் வாழ்த்துக்கள், மேக் கோப்புகளின் குழப்பமான உலகத்தை உங்களால் புரிந்துகொள்ள முடியும் என்று நம்புகிறேன்!

* துவக்கம் ஆரம்பிக்கிறது

** மேக் கோப்புகள் ஏன் உள்ளன?
ஒரு பெரிய நிரலின் எந்தப் பகுதிகளை மறுநிரல்மொழிமாற்ற(recompile) வேண்டும் என்பதைத் தீர்மானிக்க மேக் கோப்புகள் பயன்படுத்தப்படுகின்றன. பெரும்பாலான சந்தர்ப்பங்களில், C அல்லது C++ கோப்புகள் நிரல்மொழிமாற்ற(compile) படுகின்றன. பிற மொழிகள் பொதுவாக மேக் போன்ற அதே சேவை செய்யும் சொந்த கருவிகளைக் கொண்டுள்ளன. மேக் நிரல்மொழிமாற்ற மட்டும் இல்லாமல் எந்த கோப்புகள் மாறிவிட்டன என்பதைப் பொறுத்து இயக்குவதற்கு உங்களுக்கு தொடர்ச்சியான வழிமுறைகள்(series of instruction) தேவைப்படும்போதும் பயன்படுத்தலாம். 

இந்த பயிற்சியில் C/C++ நிரல்மொழிமாற்ற பயன்பாட்டு விஷயத்தில் கவனம் செலுத்தும்.

மேக் மூலம் நீங்கள் உருவாக்கக்கூடிய சார்பு வரைபடம் (dependency graph) இங்கே உள்ளது. ஏதேனும் கோப்பின் சார்புகள்(dependency) மாறினால், கோப்பு மீண்டும் நிரல்மொழிமாற்றபடும்:

#+CAPTION: Sample dependency graph for make file
#+NAME:   fig:make-dependency-graph

[[./assets/dependency_graph.png]]

** மேக் மாற்றாக வேறு என்ன மென்பொருள் உள்ளன?
பிரபலமான C/C++ க்கு மாற்று உருவாக்க அமைப்புகள்(Build tools) SCons, CMake, Bazel மற்றும் Ninja ஆகும். மைக்ரோசாஃப்ட் விஷுவல் ஸ்டுடியோ(Microsoft Visual Studio) போன்ற சில குறியீடு தொகுப்பிகள்(code editors) தங்களுக்கென உள்ளமைக்கப்பட்ட கருவிகளைக் (inbuilt tools) கொண்டுள்ளனர். ஜாவாவிற்கு(Java), அன்ட் (Ant), மேவன்(Maven) மற்றும் கிரேடில்(Gradle) உள்ளன. கோ(Go), ரஸ்ட்(Rust) மற்றும் டைப்ஸ்கிரிப்ட்(Typescript) போன்ற பிற மொழிகள் அவற்றின் சொந்த உருவாக்கப்பட்ட கருவிகளைக் கொண்டுள்ளன.

பைதான்(Python), ரூபி(Ruby) மற்றும் ரா ஜாவாஸ்கிரிப்ட்(Raw Javascri;pt) போன்ற நிரற்பெயர்ப்பி மொழிகளுக்கு (Interpreted language) மேக் கோப்பு தேவையில்லை. மேக் கோப்புபின் குறிக்கோள், எந்த கோப்புகள் மாறியுள்ளன என்பதை அடிப்படையாகக் கொண்டு நிரல்மொழிமாற்ற வேண்டிய கோப்புகளை நிரல்மொழிமாற்ற வேண்டும். ஆனால் நிரற்பெயர்ப்பி மொழிகளில் உள்ள கோப்புகள் மாறும்போது, ​​எதையும் மறுநிரல்மொழிமாற்ற வேண்டியதில்லை. நிரல் இயங்கும் போது, ​​கோப்பின் சமீபத்திய பதிப்புயை பயன்படுத்தப்படும்.
